from api.spotify_api import SpotifyAPI
from config.config import PLAYLIST_NAME, MIN_PLAYS
from utils.reminder import set_reminder

import configparser
import datetime
import os


# Load configuration from config.ini file
config = configparser.ConfigParser()
config.read(os.path.join(os.path.dirname(__file__), 'config/config.ini'))

# Spotify credentials
CLIENT_ID = config['spotify']['client_id']
CLIENT_SECRET = config['spotify']['client_secret']

# AWS credentials
AWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']
AWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY']
AWS_REGION = os.environ['AWS_REGION']
SENDER_EMAIL = os.environ['SENDER_EMAIL']
RECIPIENT_EMAIL = os.environ['RECIPIENT_EMAIL']
APPLE_ID = os.environ['APPLE_ID']

# Authorization
spotify = SpotifyAPI(config_file=os.path.join(os.path.dirname(__file__), 'config/config.ini'))
spotify.client_credentials_manager

# Playlist name
playlist_name = PLAYLIST_NAME

# Check if playlist exists, create it if it doesn't
playlist_id = spotify.check_playlist_exists(spotify.get_user_id())
if not playlist_id:
    description = "Weekly playlist generated by Moodify"
    new_playlist = spotify.create_playlist(spotify.get_user_id(), name=playlist_name, description=description)
    playlist_id = new_playlist['id']

# Get playlist tracks
playlist_tracks = spotify.get_playlist_tracks(playlist_id)

# Get user's top tracks
user_tracks = []
time_range = "short_term"  # Options are: short_term, medium_term, long_term
limit = 50
results = spotify.get_user_top_tracks(spotify.get_user_id(), time_range=time_range, limit=limit)
user_tracks += results['items']
while results['next']:
    results = spotify.sp.next(results)
    user_tracks += results['items']

# Filter tracks by minimum number of plays
filtered_tracks = []
for track in user_tracks:
    if track['uri'] not in [item['track']['uri'] for item in playlist_tracks]:
        if track['popularity'] >= MIN_PLAYS:
            filtered_tracks.append(track['uri'])

# Add tracks to playlist
if filtered_tracks:
    spotify.add_tracks_to_playlist(playlist_id, filtered_tracks)
    print(f"{len(filtered_tracks)} tracks added to the playlist")

    # Set reminder for when the playlist is available
    days_until_friday = (4 - datetime.datetime.today().weekday()) % 7
    next_friday = datetime.datetime.today() + datetime.timedelta(days=days_until_friday)
    reminder_date = next_friday.strftime("%Y-%m-%d %H:%M:%S")
    set_reminder(APPLE_ID, "Weekly Playlist", reminder_date)

else:
    print("No tracks added to the playlist")

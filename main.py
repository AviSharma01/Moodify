from api.spotify_api import SpotifyAPI
import configparser
import os
import datetime
import logging

# Setup basic configuration for logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def main():
    # Load configuration from config.ini file
    config = configparser.ConfigParser()
    if not config.read(os.path.join(os.path.dirname(__file__), 'config/config.ini')):
        logging.error("Configuration file not found.")
        return

    # Initialize SpotifyAPI instance
    spotify = SpotifyAPI(config_file=os.path.join(os.path.dirname(__file__), 'config/config.ini'))

    # Get Spotify user ID
    try:
        user_id = spotify.get_user_id()
    except Exception as e:
        logging.error("Failed to retrieve user ID: %s", str(e))
        return

    # Check if the playlist exists, create it if it doesn't
    playlist_name = config.get('playlist', 'name')
    playlist_id = spotify.check_playlist_exists(user_id)
    if not playlist_id:
        description = "Weekly playlist generated by Moodify"
        playlist_id = spotify.create_playlist(user_id, name=playlist_name, description=description)
    
    # Fetch user's top tracks and audio features
    try:
        top_track_ids = spotify.get_user_top_tracks(limit=20, time_range="short_term")
        audio_features = spotify.get_audio_features(top_track_ids)
    except Exception as e:
        logging.error("Failed to fetch tracks or audio features: %s", str(e))
        return

    # Process and filter tracks based on audio features
    filtered_tracks = filter_tracks_based_on_features(audio_features)
    if filtered_tracks:
        spotify.add_tracks_to_playlist(playlist_id, filtered_tracks)
        logging.info(f"{len(filtered_tracks)} tracks added to the playlist")
        set_weekly_reminder()
    else:
        logging.info("No tracks added to the playlist")

def filter_tracks_based_on_features(audio_features):
    # Implement your actual filtering logic here
    return list(audio_features.keys())  # Placeholder

def set_weekly_reminder():
    days_until_friday = (4 - datetime.datetime.today().weekday()) % 7
    next_friday = datetime.datetime.today() + datetime.timedelta(days=days_until_friday)
    reminder_date = next_friday.strftime("%Y-%m-%d %H:%M:%S")
    logging.info(f"Reminder set for: {reminder_date}")

if __name__ == "__main__":
    main()
